/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.network1_part2_final;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.PatternSyntaxException;
import javax.swing.DefaultListModel;
import javax.swing.ListSelectionModel;

/**
 *
 * @author Ashraf
 */
public class TCPServer extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    
    ArrayList<User> activeUsers;
    int portNum = 8555;
    public TCPServer() {
        initComponents();
        this.activeUsers = new ArrayList<>();
        listeningPortTxtF.setText(portNum+"");
        
        this.onlineUsersList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        startListeningBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        listeningPortTxtF = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        onlineUsersList = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        startListeningBtn.setText("Start listening");
        startListeningBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startListeningBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("TCP Server ");

        listeningPortTxtF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listeningPortTxtFActionPerformed(evt);
            }
        });

        jLabel2.setText("Port:");

        jScrollPane1.setViewportView(onlineUsersList);

        jLabel3.setText("Online Users");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(startListeningBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)
                        .addComponent(listeningPortTxtF, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startListeningBtn)
                    .addComponent(listeningPortTxtF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startListeningBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startListeningBtnActionPerformed
        // TODO add your handling code here:
        
        new Thread(){
            
            @Override
            public void run(){
                try {
                    
//                    if(portNum.equals("")) throw new Exception();
                    ServerSocket listeningSocket = new ServerSocket(Integer.valueOf(portNum)); 
                    
                    while(true){    
                        Socket connectionSocket = listeningSocket.accept();
                        BufferedReader inFromClient =                                  //initialize buffer to read data from client
                            new BufferedReader(new InputStreamReader(connectionSocket.getInputStream()));
                        
                        System.out.println("local port"+connectionSocket.getLocalPort());
                        System.out.println("remote port"+connectionSocket.getPort());
                        System.out.println("remote socket address"+connectionSocket.getRemoteSocketAddress());
                        //TODO:
                        // if log in go to function of handlingLoginRequest // add new users to arraylist of User class
                        // if lo out go to fuunction of handlingLogOutRequest
                        // and update online users list in the client side
                        String messageFromClient = inFromClient.readLine();
                        String []splitedMessage = messageFromClient.split(":");
                        
                        String logInOrLogOut = splitedMessage[0];
                        String userName = splitedMessage[1];
                        
                        if("login".equals(logInOrLogOut)){
                            String clientPortNum = splitedMessage[2];
                            handlingLoginRequest(userName,connectionSocket,clientPortNum);
                        }else if("logout".equals(logInOrLogOut))
                            handlingLogOutRequest(splitedMessage[1]);
                        
                    }                       
                }catch(PatternSyntaxException e){
                    System.out.println("ther is a problem in spliting message");
                }catch(Exception e){
                    Logger.getLogger(TCPServer.class.getName()).log(Level.SEVERE, null, e);
                }
                
               
            }
            
        }.start();
        
    }//GEN-LAST:event_startListeningBtnActionPerformed

    private void listeningPortTxtFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listeningPortTxtFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_listeningPortTxtFActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TCPServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TCPServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TCPServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TCPServer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TCPServer().setVisible(true);
            }
        });
    }
    
    private void handlingLoginRequest(String userName, Socket userSoket, String clientPortNum){
        
        User newUser = new User(userName,Integer.valueOf(clientPortNum), userSoket);
        this.activeUsers.add(newUser);
        updataUserList();
    }
    private void handlingLogOutRequest(String userName){
        
        int numOfActiveUsers = this.activeUsers.size();
        
        for(int i=0; i<numOfActiveUsers; i++){
            if(this.activeUsers.get(i).getUserName().equals(userName)){
                this.activeUsers.remove(i);
                System.err.println("remove" + userName);
                break; 
            }  
        }
        
        updataUserList();
    }
    private void updataUserList(){
        int numOfActiveUsers = this.activeUsers.size();
        System.out.println("numOfActiveUsers: "+numOfActiveUsers);
        String activeUsersStr = "";
        
        for(int i=0; i<numOfActiveUsers; i++){
            User user = this.activeUsers.get(i);
            String userName = user.getUserName();
            String remoteIP = user.getConnectionSocket().getInetAddress().toString();
            String remotePortNum =  String.valueOf(user.getclientPortNum());
            activeUsersStr += userName+":"+remoteIP+":"+remotePortNum+"::";
        }
        
        for(int i=0; i<numOfActiveUsers; i++){
            User user = this.activeUsers.get(i);
            Socket clientSocket = user.getConnectionSocket();
            DataOutputStream outToClient;
            System.out.println("remote address"+clientSocket.getRemoteSocketAddress().toString());
            try {
                outToClient = new DataOutputStream(clientSocket.getOutputStream());     //initialize buffer to send data from client
                outToClient.writeBytes(activeUsersStr+"\n");
                System.out.println("hello i am sending active clients");
                Thread.sleep(1000);
            }catch (IOException ex) {
                Logger.getLogger(TCPServer.class.getName()).log(Level.SEVERE, null, ex);
            }
            catch (InterruptedException ex) {
                Logger.getLogger(TCPServer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        updateActiveUsersListInGUI();
        
    }
    
    public void  updateActiveUsersListInGUI(){
       DefaultListModel listModel = new DefaultListModel();
       int numOfActiveUsers = this.activeUsers.size();
       
       for(int i=0; i< numOfActiveUsers; i++){
           User user = this.activeUsers.get(i);
           String userStr = user.getUserName() +": "+ user.getConnectionSocket().getInetAddress()+": "+ user.getclientPortNum();
           listModel.addElement(userStr);
       }
       this.onlineUsersList.setModel(listModel);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField listeningPortTxtF;
    private javax.swing.JList<String> onlineUsersList;
    private javax.swing.JButton startListeningBtn;
    // End of variables declaration//GEN-END:variables
}
