/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.network1_part2_final;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Enumeration;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextPane;
import javax.swing.ListSelectionModel;
import javax.swing.text.AttributeSet;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;

/**
 *
 * @author Ammr6
 */
public class P2P extends javax.swing.JFrame {

    /**
     * Creates new form P2P
     */
    
    public static String LocalIP,RemoteIP,UserName,msge;//init var for data from txt field
    public static int LocalPort,RemotePort;// init var port from txt field
    P2PUDP p2pudp=new P2PUDP();
    TCPReceiver tCPReseiver;
    Socket clientSocket;
    DataOutputStream outToServer;
//    DefaultListModel listModel;
    public P2P() throws UnknownHostException, SocketException, FileNotFoundException, IOException {
       
        initComponents();
        Userlist.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        LocalPort=8563;//initalize port and edit it from txt feild
        localPorttxtF.setText(String.valueOf(LocalPort));//set the port in txt field
        
        //get the interfaces
        this.getInterface();
        //end get interfaces 
        //get my ip
        InetAddress myip;
        myip = InetAddress.getLocalHost();
        String ipp = myip + "";
        String [] bb = ipp.split("/");
        LocalIP = bb[1];
        localIPtxtF.setText(LocalIP);
        //
         
        //get list of ip "static" from file
//        listModel= new DefaultListModel();
//        Scanner scanner = new Scanner(new FileInputStream("IPs.txt"));
//
//        while (scanner.hasNextLine()) {
//            listModel.addElement(scanner.nextLine());
//        }
//        scanner.close();

//        Userlist.setModel(listModel);
        //
        //start running to recive masgs 
        p2pudp.start();
        //
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        localIPtxtF = new javax.swing.JTextField();
        localPorttxtF = new javax.swing.JTextField();
        remoteIPtxtF = new javax.swing.JTextField();
        RemotePorttxtF = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        MsgetxtF = new javax.swing.JTextField();
        SendBtn = new javax.swing.JButton();
        sendgroup = new javax.swing.JButton();
        StatustxtF = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        userNametxtF = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Userlist = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        MsgTxtarea = new javax.swing.JTextPane();
        logInBtn = new javax.swing.JButton();
        logOutBtn = new javax.swing.JButton();
        serverPorttxtF = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        serverIPtxtF = new javax.swing.JTextField();
        availableInterfaecComboBox1 = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(31, 31, 31));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(224, 224, 224));
        jLabel1.setText("ME");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(224, 224, 224));
        jLabel2.setText("YOUR FREIND");
        jLabel2.setToolTipText("");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(224, 224, 224));
        jLabel3.setText("IP :");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(224, 224, 224));
        jLabel4.setText("PORT :");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(224, 224, 224));
        jLabel5.setText("IP :");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(224, 224, 224));
        jLabel6.setText("PORT :");

        SendBtn.setText("SEND");
        SendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendBtnActionPerformed(evt);
            }
        });

        sendgroup.setText("Group");
        sendgroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendgroupActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(224, 224, 224));
        jLabel7.setText("Status");

        userNametxtF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                userNametxtFActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(224, 224, 224));
        jLabel8.setText("User name:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(224, 224, 224));
        jLabel9.setText("USERS");

        Userlist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                UserlistMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(Userlist);

        jScrollPane2.setViewportView(MsgTxtarea);

        logInBtn.setText("Log in");
        logInBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logInBtnActionPerformed(evt);
            }
        });

        logOutBtn.setText("Log out ");
        logOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutBtnActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(224, 224, 224));
        jLabel10.setText("Server PORT :");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(224, 224, 224));
        jLabel11.setText("Server IP :");

        availableInterfaecComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                availableInterfaecComboBox1ActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(224, 224, 224));
        jLabel12.setText("Avilable Interfaces");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(userNametxtF, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel4)
                                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabel6))
                                            .addGap(46, 46, 46)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(RemotePorttxtF, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(remoteIPtxtF)
                                                .addComponent(localPorttxtF, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(localIPtxtF)
                                                .addComponent(availableInterfaecComboBox1, 0, 154, Short.MAX_VALUE)))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(jLabel10)
                                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(serverPorttxtF)
                                                .addComponent(serverIPtxtF, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(27, 27, 27)
                                .addComponent(logInBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(logOutBtn)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(MsgetxtF, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE)
                            .addComponent(StatustxtF))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(SendBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sendgroup)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(userNametxtF, javax.swing.GroupLayout.DEFAULT_SIZE, 34, Short.MAX_VALUE)
                            .addComponent(logInBtn)
                            .addComponent(logOutBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane3)
                                .addGap(26, 26, 26))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(serverIPtxtF, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(serverPorttxtF, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addComponent(availableInterfaecComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(localIPtxtF, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(localPorttxtF, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(remoteIPtxtF, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(RemotePorttxtF, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addGap(13, 13, 13)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(MsgetxtF)
                    .addComponent(SendBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                    .addComponent(sendgroup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(StatustxtF, javax.swing.GroupLayout.DEFAULT_SIZE, 29, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(54, 54, 54))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendBtnActionPerformed
        // TODO add your handling code here:
        StatustxtF.setText("Sending...");
        if(MsgetxtF.getText().equals("")){//if there is no massege to be sent 
            StatustxtF.setText("There is no message");
        }else{
            if(remoteIPtxtF.getText().equals("")||remoteIPtxtF.getText().equals("")){//if there is no reciver info
                StatustxtF.setText("Please choose your friend :)");
            }else{
                StatustxtF.setText("try to send");
                LocalIP=localIPtxtF.getText().trim();
                LocalPort=Integer.parseInt(localPorttxtF.getText().trim());
        
                RemoteIP=remoteIPtxtF.getText().trim();
                
                RemotePort=Integer.parseInt(RemotePorttxtF.getText().trim());
        
                UserName=userNametxtF.getText();    
                msge=MsgetxtF.getText();
                msge=UserName+" : "+msge;
                
                p2pudp.SendData(RemoteIP, RemotePort, msge);
                //StatustxtF.setText("sent");
                
            }//end of inner else
        }//end of outer else
        //end of SendBtnActionPerformed
    }//GEN-LAST:event_SendBtnActionPerformed

    
    public void getInterface() throws SocketException{
        Enumeration<NetworkInterface> ifaces = NetworkInterface.getNetworkInterfaces();
        while( ifaces.hasMoreElements() )
        {
          NetworkInterface iface = ifaces.nextElement();
          Enumeration<InetAddress> addresses = iface.getInetAddresses();

          while( addresses.hasMoreElements() )
          {
            InetAddress addr = addresses.nextElement();
            if( addr instanceof Inet4Address && !addr.isLoopbackAddress() )
            {
              availableInterfaecComboBox1.addItem(addr.getHostAddress());
            }
          }
        }

      }
    
    private void sendgroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendgroupActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < Userlist.getModel().getSize(); i++) {
            Object item = Userlist.getModel().getElementAt(i);
            String [] UserArr=String.valueOf(item).split(":");
            String ip = UserArr[1].substring(1);
            System.out.println(UserArr[1] + UserArr[2]);
            StatustxtF.setText("Sending...");
            if(MsgetxtF.getText().equals("")){//if there is no massege to be sent 
                StatustxtF.setText("There is no message");
            }else{
                    StatustxtF.setText("try to send");
                    LocalIP=localIPtxtF.getText().trim();
                    LocalPort=Integer.parseInt(localPorttxtF.getText().trim());
        
                    //RemoteIP=remoteIPtxtF.getText().trim();
                    //RemotePort=Integer.parseInt(RemotePorttxtF.getText().trim());
        
                    UserName=userNametxtF.getText();
                    msge=MsgetxtF.getText();
                    msge=UserName+" : "+msge;
                    if(i == (Userlist.getModel().getSize()-1) ){
                        System.out.println("1");
                        p2pudp.SendData(ip, Integer.parseInt(UserArr[2]), msge , 0);
                    }else{
                        System.out.println("2");
                        p2pudp.SendData(ip, Integer.parseInt(UserArr[2]), msge , 1);
                    //StatustxtF.setText("sent");
                    }
            }//end of outer else
               
        }//end for loop 

    }//GEN-LAST:event_sendgroupActionPerformed

    private void UserlistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_UserlistMouseClicked
        // TODO add your handling code here:
        String selectedUser = Userlist.getSelectedValue();
        String [] splitedselectedUser = selectedUser.split(":");
        remoteIPtxtF.setText(splitedselectedUser[1].substring(1));
        RemotePorttxtF.setText(splitedselectedUser[2]);
    }//GEN-LAST:event_UserlistMouseClicked

    private void logOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutBtnActionPerformed
        // TODO add your handling code here:
        String useName = this.userNametxtF.getText();
        String serverIP = this.serverIPtxtF.getText();
        String serverPort = this.serverPorttxtF.getText();
        String myLocalIP = this.localIPtxtF.getText();
        String myLocalPort = this.localPorttxtF.getText();
        
        String logInInfoMessage = "logout:"+useName+":";
        
        try{
            clientSocket = new Socket(serverIP, Integer.valueOf(serverPort));
            outToServer =                                      //initialize buffer to send data from client
                    new DataOutputStream(clientSocket.getOutputStream());
            outToServer.writeBytes(logInInfoMessage + '\n');                          //send data to server
             
            this.logOutBtn.setEnabled(false);   
            this.logInBtn.setEnabled(true);                                    // let user to Edit his/her name / port and other
            this.localIPtxtF.setEditable(true);
            this.localPorttxtF.setEditable(true);
            this.userNametxtF.setEditable(true);
            //remove all ellement in list after logout 
            DefaultListModel listmodel=new DefaultListModel();
            Userlist.setModel(listmodel);
            listmodel.removeAllElements();
            //end removing
            
            //set ststus to logout 
            StatustxtF.setText("you are logout now ");
            //end status 
            clientSocket.close();
            
        }catch(IOException e){
             System.out.println("Socket not initialized");
        }
        catch(Exception e){
            System.out.println("There is an error in log out functionality");
        }   
        
    }//GEN-LAST:event_logOutBtnActionPerformed

    private void userNametxtFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_userNametxtFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_userNametxtFActionPerformed

    private void logInBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logInBtnActionPerformed
        // TODO add your handling code here:
        if(userNametxtF.getText().equals("")||serverIPtxtF.getText().equals("")
                ||serverPorttxtF.getText().equals("")||localIPtxtF.getText().equals("")
                ||localPorttxtF.getText().equals("")){
            
            StatustxtF.setText("please fill all field");
            
        }else {
            String useName = this.userNametxtF.getText();
            String serverIP = this.serverIPtxtF.getText();
            String serverPort = this.serverPorttxtF.getText();
            String myLocalIP = this.localIPtxtF.getText();
            String myLocalPort = this.localPorttxtF.getText();

            System.out.println("myLocalPort: "+myLocalPort);
            String logInInfoMessage = "login:"+useName+":"+myLocalPort;

            try{
                clientSocket = new Socket(serverIP, Integer.valueOf(serverPort));
    //            System.out.println("local port in t client side"+clientSocket.getLocalPort());
                outToServer =                                      //initialize buffer to send data from client
                        new DataOutputStream(clientSocket.getOutputStream());
                outToServer.writeBytes(logInInfoMessage + '\n');                          //send data to server

                this.logOutBtn.setEnabled(true);
                this.logInBtn.setEnabled(false);
                this.localIPtxtF.setEditable(false);
                this.localPorttxtF.setEditable(false);
                this.userNametxtF.setEditable(false);
    //            clientSocket.close(); 
                this.tCPReseiver = new TCPReceiver();
                tCPReseiver.start();

            }catch(Exception e){
                System.out.println("There is an error in log in functionality");
            }
        }
    }//GEN-LAST:event_logInBtnActionPerformed

    private void availableInterfaecComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_availableInterfaecComboBox1ActionPerformed
        // TODO add your handling code here:
        localIPtxtF.setText((String) availableInterfaecComboBox1.getSelectedItem());
    }//GEN-LAST:event_availableInterfaecComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(P2P.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(P2P.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(P2P.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(P2P.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new P2P().setVisible(true);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(P2P.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SocketException ex) {
                    Logger.getLogger(P2P.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(P2P.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    
        private void appendToPane(JTextPane tp, String msg, Color c)
    {
        StyleContext sc = StyleContext.getDefaultStyleContext();
        AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, c);

        aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
        aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);

        int len = tp.getDocument().getLength();
        tp.setCaretPosition(len);
        tp.setCharacterAttributes(aset, false);
        tp.replaceSelection(msg);
    }
        
        public void updateUserListInGUI(String activeUsersStr){
            String [] users = activeUsersStr.split("::");
            int numOfUsers = users.length;
            DefaultListModel listModel = new DefaultListModel();
            for(String user: users){
                listModel.addElement(user);               
            }
            this.Userlist.setModel(listModel);

        }

        private class TCPReceiver implements Runnable{

        public TCPReceiver() {
        }
        
        @Override
        public void run(){
            
            while(true){
                System.out.println("hiii");
                try {

                    if(clientSocket.isConnected()){
                        System.out.println("hi i'm connected");
                    }

                    BufferedReader inFromServer =                                       //buffer to receive data from server
                            new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));

                    String activeUsers = inFromServer.readLine();  
                    System.out.println("activeUsers : "+activeUsers);
                    Thread.sleep(100);
                    updateUserListInGUI(activeUsers);
                    
                } catch (IOException ex) {
                    System.out.println("there is a problem in receiveing message in the client side");
                } catch (InterruptedException ex) {
                    Logger.getLogger(P2P.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
            
        }
        
        public void start(){
            //StatustxtF.setText("build thread");
            Thread thread =new Thread(this);
            thread.start();
        }
    }

    public class P2PUDP implements Runnable{//USE Runnable to use thread send and receive msg
        
        private DatagramSocket serverSocket ;

        @Override
        public void run() { //as long as running it works as server
            
            try {
                serverSocket = new DatagramSocket(LocalPort);
                StatustxtF.setText("build socket");

                while(true){
                    byte[] Data = new byte[1024];//recive data
                    DatagramPacket packet =new DatagramPacket(Data, Data.length); //packet that recive
            
                    serverSocket.receive(packet);

                    //get the IP and port for the sender that send msg to me 
                    InetAddress senderIPAddress = packet.getAddress();
                    int senderport = packet.getPort();
                    
                    StatustxtF.setText("You get massage from IP="+senderIPAddress+", Port ="+senderport);
                    
                    //String msg = new String(Data, 0, packet.getLength());
                    
                    String msg = new String(packet.getData());
                    String m = msg+"\n";
                    appendToPane(MsgTxtarea,m,Color.red);
                }
            } catch (Exception e) {
                StatustxtF.setText("Somthing ERROR");
                JOptionPane.showMessageDialog(null,e);
            }

        }

        public void start(){
            //StatustxtF.setText("build thread");
            Thread thread =new Thread(this);
            thread.start();
        }
        
        public void SendData(String IP,int Port, String msg){
            try {
                //DatagramSocket clientSocket = new DatagramSocket();
                InetAddress IPAddress = InetAddress.getByName(IP);
                byte[] sendData;
                sendData = msg.getBytes();
                DatagramPacket sendPacket =
                    new DatagramPacket(sendData, sendData.length, IPAddress, Port);
                serverSocket.send(sendPacket);
                
                StatustxtF.setText("the message was sent");
                MsgetxtF.setText("");
                
                String m=msg+"\n";
                appendToPane(MsgTxtarea,m,Color.blue);
                
            } catch (Exception e) {
                StatustxtF.setText("There is Smothing ERROR");
            }
        }
        
        public void SendData(String IP,int Port, String msg,int flag){
                        try {
                //DatagramSocket clientSocket = new DatagramSocket();
                InetAddress IPAddress = InetAddress.getByName(IP);
                byte[] sendData;
                sendData = msg.getBytes();
                DatagramPacket sendPacket =
                    new DatagramPacket(sendData, sendData.length, IPAddress, Port);
                serverSocket.send(sendPacket);
                
                StatustxtF.setText("the message was sent");
                
                if(flag==0){
                    MsgetxtF.setText("");
                    String m=msg+"\n";
                    appendToPane(MsgTxtarea,m,Color.blue);
                }
                //String m=msg+"\n";
                //appendToPane(MsgTxtarea,m,Color.blue);
                
              
            } catch (Exception e) {
                StatustxtF.setText("There is Smothing ERROR");
            }
        }


        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane MsgTxtarea;
    private javax.swing.JTextField MsgetxtF;
    private javax.swing.JTextField RemotePorttxtF;
    private javax.swing.JButton SendBtn;
    private javax.swing.JTextField StatustxtF;
    private javax.swing.JList<String> Userlist;
    private javax.swing.JComboBox<String> availableInterfaecComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField localIPtxtF;
    private javax.swing.JTextField localPorttxtF;
    private javax.swing.JButton logInBtn;
    private javax.swing.JButton logOutBtn;
    private javax.swing.JTextField remoteIPtxtF;
    private javax.swing.JButton sendgroup;
    private javax.swing.JTextField serverIPtxtF;
    private javax.swing.JTextField serverPorttxtF;
    private javax.swing.JTextField userNametxtF;
    // End of variables declaration//GEN-END:variables
}
